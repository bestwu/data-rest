buildscript {
    repositories {
        try {
            maven { url mavenLocalUrl }
        } catch (ignored) {
            mavenLocal()
        }
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release/' }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1"
    }
}

dependencies {
    //web
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.hateoas:spring-hateoas'

    //utils
    compile 'org.atteo:evo-inflector'

    provided "org.projectlombok:lombok"

    //optional
    optional 'cn.bestwu:api-sign:1.0-SNAPSHOT'
    optional 'org.springframework.security.oauth:spring-security-oauth2'
    optional 'org.apache.logging.log4j:log4j-core'
    optional 'org.springframework.boot:spring-boot-starter-aop'
    optional 'org.springframework.boot:spring-boot-starter-data-jpa'
    optional 'com.querydsl:querydsl-jpa'
    optional 'org.springframework.boot:spring-boot-starter-data-mongodb'
    optional 'com.querydsl:querydsl-mongodb'
    optional 'org.hibernate:hibernate-search-orm'
    optional 'org.apache.lucene:lucene-highlighter'
    optional 'org.springframework.boot:spring-boot-starter-mail'
    optional 'com.belerweb:pinyin4j'
    //test
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }

            pom.withXml {
                Node root = asNode()

                //compile
                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.dependencies.find { dep ->
                        dep.group == it.groupId.text() && dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = 'compile'
                }
                //provided
                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.provided.dependencies.find { dep ->
                        dep.group == it.groupId.text() && dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = 'provided'
                }
                //optional
                root.dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.optional.dependencies.find { dep ->
                        dep.group == it.groupId.text() && dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = 'compile'
                    it.appendNode('optional', 'true')
                }

                root.appendNode('name', 'bestwu data-rest')
                root.appendNode('packaging', 'jar')
                root.appendNode('description', 'bestwu data-rest')
                root.appendNode('url', 'https://bitbucket.org/bestwu/data-rest')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', 'bestwu')
                developer.appendNode('name', 'Peter Wu')
                developer.appendNode('email', 'piterwu@outlook.com')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://bitbucket.org/bestwu/data-rest')
                scm.appendNode('connection', 'scm:https://bestwu@bitbucket.org/bestwu/data-rest.git')
                scm.appendNode('developerConnection', 'scm:git@bitbucket.org:bestwu/data-rest.git')
            }
        }
    }
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ['mavenJava']

    publish = true
    pkg {
        repo = 'maven'
        name = 'com.bestwu:data-rest'
        desc = 'bestwu data-rest'
        vcsUrl = 'https://bitbucket.org/bestwu/data-rest'
        licenses = ['Apache-2.0']
        labels = ['data-rest']

        version {
            mavenCentralSync {
                sync = true
                user = mavenCentralUsername
                password = mavenCentralPassword
                close = '1'
            }
        }
    }
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            username = bintrayUsername
            password = bintrayApiKey
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
        }
    }
}